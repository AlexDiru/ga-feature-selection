import libsvm.svm_model;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.Logistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomForest;
import weka.core.FastVector;
import weka.core.Instances;

/**
 * Created by alex on 24/11/14.
 */
public class CombinedClassifier {
    private J48 decisionTree = new J48();
    private svm_model svm = new svm_model();
    private RandomForest randomForest = new RandomForest();
    private Logistic logisticRegression = new Logistic();
    private IBk kNN = new IBk();

    private String decisionTreeFeatures = "11000100011011001010100000011000011001010000010011111100100110001000100001000010111000010011001111100000011110100010111101001001110010001010100011010101010101100100011001001101011110011001011000100011110011110001010000100011100001110110110011000110110101001001001100111110110100011101011110100110010010010000110010011101110000011000001";
    private String randomForestFeatures = "10110000011100010110111100001011110010010110110010000010001110111101100011100000010100010101001011000110010011011010001111111001101011001100101111011111110101111011110010100000011100101011011000000001001111000111101000100010000011010111011000011110000000001111010111110110000100110101010111001010110101100001100100001010111101011011011";
    private String svmFeatures = "10110100000000001010111000001011010100010000100000100100100011001010011001110010010111110111000010010000111000110100100111101111011111100100101000010111011110000011011000011010111000000111000110011011000011000000000111001110100111010010110001000000001101100010010111100100110001101001111001011000100101101001000000110011101000001111010";
    private String logisticRegressionFeatures = "10111000010100010111010000000010011100010000001010100010001000000100100000001110000000100011101101001111001101011110010000100110000111001111011011111001011000010100111111110100101111011111101010010101101000100010011010001101111001110110100011101010011101001101011101010011011111001101101100100011000111110011000010101000011010010010010";
    private String kNNFeatures = "00000010100010111101010110001000011110001000101000101110110011101110100011001001100100010100001101010101011100110111011110010101111011011100100111010000101001010111001010001111101010011110011110000000100001001001100100000111100110100101100011111001010110001000100001000000011000000100100110111100000111001010111110101000110100010010011";

    public CombinedClassifier(DataReader dataReader) {
        //Setup classifier properties
        randomForest.setNumTrees(50);

        //Train each classifier on full training set (no CV needed)

    }

    private double wekaGeneric(Classifier model, BitStringChromosome chromosome) {
        FastVector predictions = new FastVector();

        for (int j = 0; j < dataReader.getTrainingInstances().length; j++) {
            Instances trInstances = chromosome.getFeatureSubset(dataReader.getTrainingInstances()[j]);
            Instances teInstances = chromosome.getFeatureSubset(dataReader.getTestInstances()[j]);

            Evaluation validation = classify(model, trInstances, teInstances);
            predictions.appendElements(validation.predictions());
        }

        return calculateAccuracy(predictions);
    }
}
